---
- name: "System | {{ ansible_distribution }} | Update and Upgrade"
  block:
    - name: System | Update packages
      ansible.builtin.apt:
        autoclean: true
        autoremove: true
        update_cache: true
        cache_valid_time: 3600
        upgrade: full
      become: true
  rescue:
    - name: System | Error handling
      ansible.builtin.debug:
        msg: There was an error during the update cycle.
  always:
    - name: System | Check if reboot is required
      ansible.builtin.stat:
        path: /var/run/reboot-required
      register: reboot_required

    - name: Reboot system if required
      ansible.builtin.reboot:
        msg: Rebooting to complete system upgrade
        reboot_timeout: 120
      when: reboot_required.stat.exists

- name: "System | {{ ansible_distribution }} | Hostname"
  when:
    - not ansible_host_environment_is_wsl
  block:
    - name: System | Set hostname to inventory hostname
      ansible.builtin.hostname:
        name: "{{ inventory_hostname | default('ubuntu') }}"

    - name: System | Set /etc/hosts to include inventory hostname
      ansible.builtin.blockinfile:
        path: /etc/hosts
        block: |
          127.0.0.1  localhost
          127.0.1.1  {{ inventory_hostname | default('ubuntu') }}

- name: "System | {{ ansible_distribution }} | Timezone"
  block:
    - name: System | Remove systemd-timesyncd packages
      ansible.builtin.apt:
        name: "{{ item }}"
        state: absent
      loop:
        - systemd-timesyncd

    - name: System | Install ntp package
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
      loop:
        - ntp
      notify: Start ntp

    - name: System | Set local timezone
      community.general.timezone:
        name: "{{ system_timezone | default('Etc/UTC') }}"

- name: "System | {{ ansible_distribution }} | User"
  when:
    - not ansible_host_environment_is_wsl
  block:
    - name: System | Ensure groups are present
      ansible.builtin.group:
        name: "{{ item }}"
        state: present
      loop:
        - sudo

    - name: System | Ensure sudo group has sudo privileges
      ansible.builtin.lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: ^%sudo
        line: "%sudo ALL=(ALL:ALL) ALL"
        validate: /usr/sbin/visudo -cf %s

    - name: "System | Give sudo access to {{ ansible_user }}"
      ansible.builtin.blockinfile:
        path: /etc/sudoers
        insertafter: "%sudo ALL=(ALL:ALL) ALL"
        block: | # pragma: allowlist secret
          # Gives sudo access to the devops group
          {{ ansible_user }}        ALL=(ALL)       NOPASSWD: ALL

- name: "System | {{ ansible_distribution }} | Install packages"
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
  loop:
    - curl
    - git
    - htop
    - jq
    - nano
    - nfs-common
    - open-iscsi
    - openssh-server
    - sudo
  become: true

- name: "System | {{ ansible_distribution }} | Install monitoring packages"
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
  loop:
    - prometheus-node-exporter
  become: true

- name: "System | {{ ansible_distribution }} | Install qemu-guest-agent"
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
    update_cache: true
  loop:
    - qemu-guest-agent
  become: true
  when:
    - ansible_virtualization_role == "guest"
  notify: Start qemu

- name: "System | {{ ansible_distribution }} | Disable Cloud-Init"
  block:
    - name: Cloud-Init | Check for Cloud-Init folder
      ansible.builtin.stat:
        path: /etc/cloud/
      register: etc_cloud_folder
    - name: Cloud-Init | Disable /etc/cloud/cloud-init.disabled
      ansible.builtin.copy:
        dest: /etc/cloud/cloud-init.disabled
        content: disabled by ansible\n
        owner: root
        group: root
        mode: "0644"
      when:
        - etc_cloud_folder.stat.exists
    - name: Cloud-Init | Remove package
      ansible.builtin.apt:
        name: "{{ item }}"
        state: absent
      loop:
        - cloud-init
      when:
        - etc_cloud_folder.stat.exists
    - name: Cloud-Init | Disable all services
      ansible.builtin.service:
        name: "{{ item }}"
        state: stopped
      loop:
        - cloud-config.service
        - cloud-final.service
        - cloud-init-local.service
        - cloud-init.service
      when:
        - etc_cloud_folder.stat.exists
  rescue:
    - name: Cloud-Init | Something wrong
      ansible.builtin.debug:
        msg: Playbook had an issue with Cloud-Init disabling.


- name: System | Install win32yank.exe
  when:
    - ansible_host_environment_is_wsl
    - not win32yank_installed.stat.exists
  block:
    - name: System | Download win32yank zip
      ansible.builtin.get_url:
        url: https://github.com/equalsraf/win32yank/releases/download/v0.0.4/win32yank-x64.zip
        dest: /tmp/win32yank.zip
        mode: "0755"

    - name: System | Unzip win32yank.exe
      ansible.builtin.unarchive:
        src: /tmp/win32yank.zip
        dest: /tmp
        mode: "0755"

    - name: System | Copy win32yank into path
      ansible.builtin.copy:
        remote_src: true
        src: /tmp/win32yank.exe
        dest: /usr/local/bin/win32yank.exe
        mode: "0755"
      become: true

    - name: System | Remove tmp files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /tmp/win32yank.zip
        - /tmp/win32yank.exe
