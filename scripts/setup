#!/bin/bash

# Colors Code
RESTORE='\033[0m'
NC='\033[0m'
BLACK='\033[00;30m'
RED='\033[00;31m'
GREEN='\033[00;32m'
YELLOW='\033[00;33m'
BLUE='\033[00;34m'
PURPLE='\033[00;35m'
CYAN='\033[00;36m'
SEA="\\033[38;5;49m"
LIGHTGRAY='\033[00;37m'
LBLACK='\033[01;30m'
LRED='\033[01;31m'
LGREEN='\033[01;32m'
LYELLOW='\033[01;33m'
LBLUE='\033[01;34m'
LPURPLE='\033[01;35m'
LCYAN='\033[01;36m'
WHITE='\033[01;37m'
OVERWRITE='\e[1A\e[K'

# Emoji Code
CHECK_MARK="${GREEN}\xE2\x9C\x94${NC}"
X_MARK="${RED}\xE2\x9C\x96${NC}"
PIN="${RED}\xF0\x9F\x93\x8C${NC}"
CLOCK="${GREEN}\xE2\x8C\x9B${NC}"
ARROW="${SEA}\xE2\x96\xB6${NC}"
BOOK="${RED}\xF0\x9F\x93\x8B${NC}"
HOT="${ORANGE}\xF0\x9F\x94\xA5${NC}"
WARNING="${RED}\xF0\x9F\x9A\xA8${NC}"
RIGHT_ANGLE="${GREEN}\xE2\x88\x9F${NC}"

set -e

# Paths
DOTFILES_CONFIG_DIR="$HOME/.config/dotfiles"
DOTFILES_DIR="$HOME/.dotfiles"
DOTFILES_FIRST_RUN="$HOME/.dotfiles_run"
DOTFILES_LOG="$HOME/.dotfiles.log"
DOTFILES_SECRET="$HOME/.ansible-vault/vault.secret"
SSH_DIR="$HOME/.ssh"

function _task {
  if [[ $TASK != "" ]]; then
    printf "${OVERWRITE}${LGREEN} [✓]  ${LGREEN}${TASK}\n"
  fi
  TASK=$1
  printf "${LBLACK} [ ]  ${TASK} \n${LRED}"
}

function _cmd {
  if ! [[ -f $DOTFILES_LOG ]]; then
    touch $DOTFILES_LOG
  fi
  > $DOTFILES_LOG
  if eval "$1" 1> /dev/null 2> $DOTFILES_LOG; then
    return 0
  fi
  printf "${OVERWRITE}${LRED} [X]  ${TASK}${LRED}\n"
  while read line; do
    printf "      ${line}\n"
  done < $DOTFILES_LOG
  printf "\n"
  rm $DOTFILES_LOG
  exit 1
}

function _clear_task {
  TASK=""
}

function _task_done {
  printf "${OVERWRITE}${LGREEN} [✓]  ${LGREEN}${TASK}\n"
  _clear_task
}

function ubuntu_setup() {
  if ! dpkg -s ansible >/dev/null 2>&1; then
    _task "Installing Ansible"
    _cmd "sudo apt-get update"
    _cmd "sudo apt-get install -y software-properties-common"
    _cmd "sudo apt-add-repository -y ppa:ansible/ansible"
    _cmd "sudo apt-get update"
    _cmd "sudo apt-get install -y ansible"
    _cmd "sudo apt-get install python3-argcomplete"
    _cmd "sudo activate-global-python-argcomplete"
  fi
  if ! dpkg -s python3 >/dev/null 2>&1; then
    _task "Installing Python3"
    _cmd "sudo apt-get install -y python3"
  fi
  if ! dpkg -s python3-pip >/dev/null 2>&1; then
    _task "Installing Python3 Pip"
    _cmd "sudo apt-get install -y python3-pip"
  fi
}

update_ansible_galaxy() {
  local os=$1
  local os_requirements=""
  _task "Updating Ansible Galaxy"
  if [ -f "$DOTFILES_DIR/collections/$os.yml" ]; then
    _task "${OVERWRITE}Updating Ansible Galaxy with OS Config: $os"
    os_requirements="$DOTFILES_DIR/collections/$os.yml"
  fi
  _cmd "ansible-galaxy install -r $DOTFILES_DIR/collections/requirements.yml $os_requirements"
}

source /etc/os-release
_task "Loading Setup for detected OS: $ID"
case $ID in
  ubuntu)
    ubuntu_setup
    ;;
  *)
    _task "Unsupported OS"
    _cmd "echo 'Unsupported OS'"
    ;;
esac

generate_ssh_key() {
  if ! [[ -f "$SSH_DIR/authorized_keys" ]]; then
    _task "Generating SSH keys"
    _cmd "mkdir -p $SSH_DIR"
    _cmd "chmod 700 $SSH_DIR"
    _cmd "ssh-keygen -o -a 100 -t ed25519 -f $SSH_DIR/id_ed25519 -N '' -C $USER@$HOSTNAME"
    _cmd "cat $SSH_DIR/id_ed25519.pub >> $SSH_DIR/authorized_keys"
  fi
}

if ! [[ -d "$DOTFILES_DIR" ]]; then
  _task "Cloning repository"
  _cmd "git clone --quiet git@github.com:irish1986/dotfiles.git $DOTFILES_DIR"
else
  _task "Updating repository"
  _cmd "git -C $DOTFILES_DIR pull --quiet"
fi

pushd "$DOTFILES_DIR" 2>&1 > /dev/null
update_ansible_galaxy $ID

_task "Running playbook"; _task_done
if [[ -f $DOTFILES_SECRET ]]; then
  ansible-playbook --vault-password-file $DOTFILES_SECRET "$DOTFILES_DIR/main.yml" "$@"
else
  ansible-playbook "$DOTFILES_DIR/main.yml" "$@"
fi

popd 2>&1 > /dev/null

if ! [[ -f "$DOTFILES_FIRST_RUN" ]]; then
  echo -e "${CHECK_MARK} ${GREEN}First run complete!${NC}"
  echo -e "${ARROW} ${CYAN}Please reboot your computer to complete the setup.${NC}"
  touch "$DOTFILES_FIRST_RUN"
fi
